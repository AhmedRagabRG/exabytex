// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  role          Role      @default(USER)
  resetToken    String?   // Token لاستعادة كلمة المرور
  resetTokenExpiry DateTime? // تاريخ انتهاء صلاحية Token
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  orders          Order[]
  cartItems       CartItem[]
  createdProducts Product[] @relation("ProductCreator")
  reviews         Review[]
  wishlistItems   Wishlist[]
  createdPromoCodes PromoCode[] @relation("PromoCodeCreator")
  authoredBlogs   BlogPost[] @relation("BlogAuthor")
  approvedBlogs   BlogPost[] @relation("BlogApprover")
  comments        Comment[] @relation("CommentAuthor")
  siteSettings    SiteSettings[] @relation("SiteSettingsUpdater")
  
  // AI Content & Coins System
  coins           UserCoins?
  coinTransactions CoinTransaction[]
  aiContents      AIContent[]
  coinPurchases   CoinPurchase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business Models
model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  discountedPrice Float?  // السعر بعد الخصم (اختياري)
  hasDiscount Boolean  @default(false)  // هل يوجد خصم
  image       String?
  category    String
  features    String // JSON array of features
  isPopular   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy     User?       @relation("ProductCreator", fields: [createdById], references: [id])
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]
  wishlistItems Wishlist[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  total       Float
  promoCodeId String?
  discount    Float       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  promoCode PromoCode?  @relation("OrderPromoCode", fields: [promoCodeId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // One review per user per product
}

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  content     String
  excerpt     String
  slug        String      @unique
  coverImage  String?
  authorId    String
  authorName  String
  authorAvatar String?
  tags        String      // JSON array of tags
  featured    Boolean     @default(false)
  status      BlogStatus  @default(PENDING)  // حالة المقال
  published   Boolean     @default(false)
  isVisible   Boolean     @default(true)      // للتحكم في الإظهار/الإخفاء في الموقع
  publishedAt DateTime?   // تاريخ النشر
  rejectionReason String? // سبب الرفض
  approvedById String?    // من وافق على المقال
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author      User        @relation("BlogAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  approvedBy  User?       @relation("BlogApprover", fields: [approvedById], references: [id])
  featuredPost FeaturedBlogPost?
  comments    Comment[]   @relation("BlogComments")
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  blogPostId  String
  authorId    String
  authorName  String
  authorAvatar String?
  parentId    String?   // للرد على تعليق آخر
  isApproved  Boolean   @default(true)  // للإشراف على التعليقات
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  blogPost    BlogPost  @relation("BlogComments", fields: [blogPostId], references: [id], onDelete: Cascade)
  author      User      @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")

  @@index([blogPostId])
  @@index([parentId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String   @default("Tag")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  discountType String  // "PERCENTAGE" or "FIXED"
  discountValue Float  // نسبة الخصم او المبلغ الثابت
  minimumAmount Float?  // أقل مبلغ للشراء
  maxUses     Int?     // عدد الاستخدامات المسموح
  usedCount   Int      @default(0)
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User     @relation("PromoCodeCreator", fields: [createdById], references: [id])
  orders      Order[]  @relation("OrderPromoCode")
}

model HomeService {
  id          String   @id @default(cuid())
  title       String
  subtitle    String
  description String
  features    String   // JSON array of features
  icon        String   // Lucide icon name
  gradient    String   // CSS gradient classes
  bgGradient  String   // Background gradient for hover
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FeaturedBlogPost {
  id          String   @id @default(cuid())
  blogPostId  String   @unique
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  blogPost    BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
}

model SiteSettings {
  id                        String   @id @default(cuid())
  siteName                  String   @default("AI Agency")
  siteDescription           String?  @default("وكالة متخصصة في الذكاء الاصطناعي والتسويق الرقمي")
  logo                      String?
  primaryColor             String   @default("#3b82f6")
  secondaryColor           String   @default("#8b5cf6")
  
  // إعدادات العملة
  defaultCurrency          String   @default("SAR")        // العملة الافتراضية
  currencySymbol           String   @default("ر.س")        // رمز العملة
  currencyPosition         String   @default("after")      // موضع العملة: "before" أو "after"
  decimalPlaces            Int      @default(2)           // عدد الخانات العشرية
  
  // معلومات الاتصال
  phone1                   String?
  phone2                   String?
  email1                   String?
  email2                   String?
  address                  String?
  
  // وسائل التواصل الاجتماعي
  facebookUrl              String?
  twitterUrl               String?
  instagramUrl             String?
  linkedinUrl              String?
  whatsappNumber           String?
  telegramUrl              String?
  youtubeUrl               String?
  
  // محتوى الصفحات
  privacyPolicyContent     String?
  termsOfServiceContent    String?
  aboutUsContent           String?
  privacyPolicyUrl         String?
  termsOfServiceUrl        String?
  
  // إعدادات الموقع
  enableRegistration       Boolean  @default(true)
  enableComments           Boolean  @default(true)
  enableNewsletter         Boolean  @default(true)
  defaultUserRole          String   @default("USER")
  
  // SEO
  metaTitle                String?
  metaDescription          String?
  metaKeywords             String?
  
  updatedById              String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  updatedBy                User?    @relation("SiteSettingsUpdater", fields: [updatedById], references: [id])
}

// AI Content Generation & Coins System
model UserCoins {
  id              String   @id @default(cuid())
  userId          String   @unique
  balance         Int      @default(0)      // رصيد الكوينز الحالي
  totalEarned     Int      @default(0)      // إجمالي الكوينز المكتسبة
  totalSpent      Int      @default(0)      // إجمالي الكوينز المستخدمة
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoinTransaction {
  id              String            @id @default(cuid())
  userId          String
  type            CoinTransactionType
  amount          Int               // مقدار الكوينز (موجب للإضافة، سالب للخصم)
  reason          String            // سبب المعاملة
  description     String?           // وصف إضافي
  relatedId       String?           // ID للعملية المرتبطة (AI content, order, etc.)
  balanceBefore   Int               // الرصيد قبل المعاملة
  balanceAfter    Int               // الرصيد بعد المعاملة
  createdAt       DateTime          @default(now())

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIContent {
  id              String            @id @default(cuid())
  userId          String
  type            AIContentType
  title           String
  prompt          String            // النص المدخل من المستخدم
  content         String            // المحتوى المولد
  model           String            // نموذج AI المستخدم
  coinsCost       Int               // عدد الكوينز المستخدمة
  wordCount       Int?              // عدد الكلمات
  language        String            @default("ar")
  isBookmarked    Boolean           @default(false)
  metadata        String?           // JSON لبيانات إضافية
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoinPackage {
  id              String   @id @default(cuid())
  name            String
  description     String?
  coinAmount      Int               // عدد الكوينز في الباقة
  price           Float             // السعر بالعملة المحلية
  discount        Float    @default(0)  // نسبة الخصم
  isPopular       Boolean  @default(false)
  isActive        Boolean  @default(true)
  bonusCoins      Int      @default(0)  // كوينز إضافية مجانية
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  purchases       CoinPurchase[]
}

model CoinPurchase {
  id              String            @id @default(cuid())
  userId          String
  packageId       String
  coinAmount      Int               // عدد الكوينز المشتراة
  price           Float             // السعر المدفوع
  paymentMethod   String?           // طريقة الدفع
  paymentStatus   PaymentStatus     @default(PENDING)
  transactionId   String?           // معرف المعاملة من نظام الدفع
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  package         CoinPackage       @relation(fields: [packageId], references: [id])
}

// Enums
enum Role {
  USER
  MANAGER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum BlogStatus {
  PENDING     // في انتظار الموافقة
  APPROVED    // موافق عليه
  REJECTED    // مرفوض
  PUBLISHED   // منشور
}

enum CoinTransactionType {
  PURCHASE      // شراء كوينز
  SPEND         // استخدام كوينز
  BONUS         // كوينز مجانية
  REFUND        // استرداد كوينز
  REWARD        // مكافأة
}

enum AIContentType {
  ARTICLE       // مقال
  BLOG_POST     // مقال مدونة
  SOCIAL_POST   // منشور وسائل التواصل
  PRODUCT_DESC  // وصف منتج
  EMAIL         // بريد إلكتروني
  AD_COPY       // نص إعلاني
  SCRIPT        // سكريبت
  SUMMARY       // ملخص
  TRANSLATION   // ترجمة
  REWRITE       // إعادة صياغة
}

enum PaymentStatus {
  PENDING       // في انتظار الدفع
  COMPLETED     // تم الدفع
  FAILED        // فشل الدفع
  REFUNDED      // تم الاسترداد
  CANCELLED     // ملغى
}
