generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  phone             String?
  role              String            @default("USER")
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  aiContents        AIContent[]
  accounts          Account[]
  approvedBlogs     BlogPost[]        @relation("BlogApprover")
  authoredBlogs     BlogPost[]        @relation("BlogAuthor")
  cartItems         CartItem[]
  coinPurchases     CoinPurchase[]
  coinTransactions  CoinTransaction[]
  comments          Comment[]         @relation("CommentAuthor")
  orders            Order[]
  createdProducts   Product[]         @relation("ProductCreator")
  createdPromoCodes PromoCode[]       @relation("PromoCodeCreator")
  reviews           Review[]
  sessions          Session[]
  siteSettings      SiteSettings[]    @relation("SiteSettingsUpdater")
  coins             UserCoins?
  wishlistItems     Wishlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id              String      @id @default(cuid())
  title           String
  description     String
  price           Float
  discountedPrice Float?
  hasDiscount     Boolean     @default(false)
  image           String?
  category        String
  features        String      @default("[]")
  isPopular       Boolean     @default(false)
  isActive        Boolean     @default(true)
  createdById     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  cartItems       CartItem[]
  orderItems      OrderItem[]
  createdBy       User?       @relation("ProductCreator", fields: [createdById], references: [id])
  reviews         Review[]
  wishlistItems   Wishlist[]
  emailSubject    String?
  emailContent    String?
  downloadUrl     String?
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      String      @default("PENDING")
  total       Float
  promoCodeId String?
  discount    Float       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  promoCode   PromoCode?  @relation("OrderPromoCode", fields: [promoCodeId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  isFree      Boolean     @default(false)
  paymentSession PaymentSession?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
}

model CartItem {
  id             String   @id @default(cuid())
  userId         String
  productId      String
  quantity       Int      @default(1)
  price          Float    @default(0)
  discountedPrice Float?
  hasDiscount    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model BlogPost {
  id              String            @id @default(cuid())
  title           String
  content         String
  excerpt         String
  slug            String            @unique
  coverImage      String?
  authorId        String
  authorName      String
  authorAvatar    String?
  tags            String
  featured        Boolean           @default(false)
  status          String            @default("PENDING")
  published       Boolean           @default(false)
  isVisible       Boolean           @default(true)
  publishedAt     DateTime?
  rejectionReason String?
  approvedById    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  approvedBy      User?             @relation("BlogApprover", fields: [approvedById], references: [id])
  author          User              @relation("BlogAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  comments        Comment[]         @relation("BlogComments")
  featuredPost    FeaturedBlogPost?
}

model Comment {
  id           String    @id @default(cuid())
  content      String
  blogPostId   String
  authorId     String
  authorName   String
  authorAvatar String?
  parentId     String?
  isApproved   Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  parent       Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[] @relation("CommentReplies")
  author       User      @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  blogPost     BlogPost  @relation("BlogComments", fields: [blogPostId], references: [id], onDelete: Cascade)

  @@index([blogPostId])
  @@index([parentId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String   @default("Tag")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PromoCode {
  id            String    @id @default(cuid())
  code          String    @unique
  description   String?
  discountType  String
  discountValue Float
  minimumAmount Float?
  maxUses       Int?
  usedCount     Int       @default(0)
  isActive      Boolean   @default(true)
  expiresAt     DateTime?
  createdById   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]   @relation("OrderPromoCode")
  createdBy     User      @relation("PromoCodeCreator", fields: [createdById], references: [id])
}

model HomeService {
  id          String   @id @default(cuid())
  title       String
  subtitle    String
  description String
  features    String
  icon        String
  gradient    String
  bgGradient  String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FeaturedBlogPost {
  id         String   @id @default(cuid())
  blogPostId String   @unique
  isActive   Boolean  @default(true)
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
}

model SiteSettings {
  id                    String   @id @default(cuid())
  siteName              String   @default("AI Agency")
  siteDescription       String?  @default("وكالة متخصصة في الذكاء الاصطناعي والتسويق الرقمي")
  logo                  String?
  primaryColor          String   @default("#3b82f6")
  secondaryColor        String   @default("#8b5cf6")
  defaultCurrency       String   @default("SAR")
  currencySymbol        String   @default("ر.س")
  currencyPosition      String   @default("after")
  decimalPlaces         Int      @default(2)
  phone1                String?
  phone2                String?
  email1                String?
  email2                String?
  address               String?
  facebookUrl           String?
  twitterUrl            String?
  instagramUrl          String?
  linkedinUrl           String?
  whatsappNumber        String?
  telegramUrl           String?
  youtubeUrl            String?
  privacyPolicyContent  String?
  termsOfServiceContent String?
  aboutUsContent        String?
  privacyPolicyUrl      String?
  termsOfServiceUrl     String?
  enableRegistration    Boolean  @default(true)
  enableComments        Boolean  @default(true)
  enableNewsletter      Boolean  @default(true)
  defaultUserRole       String   @default("USER")
  metaTitle             String?
  metaDescription       String?
  metaKeywords          String?
  updatedById           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  updatedBy             User?    @relation("SiteSettingsUpdater", fields: [updatedById], references: [id])
}

model UserCoins {
  id          String   @id @default(cuid())
  userId      String   @unique
  balance     Int      @default(0)
  totalEarned Int      @default(0)
  totalSpent  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoinTransaction {
  id            String   @id @default(cuid())
  userId        String
  type          String
  amount        Int
  reason        String
  description   String?
  relatedId     String?
  balanceBefore Int
  balanceAfter  Int
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIContent {
  id           String   @id @default(cuid())
  userId       String
  type         String
  title        String
  prompt       String
  content      String
  model        String
  coinsCost    Int
  wordCount    Int?
  language     String   @default("ar")
  isBookmarked Boolean  @default(false)
  metadata     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoinPackage {
  id          String         @id @default(cuid())
  name        String
  description String?
  coinAmount  Int
  price       Float
  discount    Float          @default(0)
  isPopular   Boolean        @default(false)
  isActive    Boolean        @default(true)
  bonusCoins  Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  purchases   CoinPurchase[]
}

model CoinPurchase {
  id            String      @id @default(cuid())
  userId        String
  packageId     String
  coinAmount    Int
  price         Float
  paymentMethod String?
  paymentStatus String      @default("PENDING")
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  package       CoinPackage @relation(fields: [packageId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentSession {
  id        String   @id @default(cuid())
  orderId   String   @unique
  amount    Float
  currency  String   @default("EGP")
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
}
