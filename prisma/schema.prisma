// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  orders          Order[]
  cartItems       CartItem[]
  createdProducts Product[] @relation("ProductCreator")
  reviews         Review[]
  wishlistItems   Wishlist[]
  createdPromoCodes PromoCode[] @relation("PromoCodeCreator")
  authoredBlogs   BlogPost[] @relation("BlogAuthor")
  approvedBlogs   BlogPost[] @relation("BlogApprover")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business Models
model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  discountedPrice Float?  // السعر بعد الخصم (اختياري)
  hasDiscount Boolean  @default(false)  // هل يوجد خصم
  image       String?
  category    String
  features    String // JSON array of features
  isPopular   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy     User?       @relation("ProductCreator", fields: [createdById], references: [id])
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]
  wishlistItems Wishlist[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  total       Float
  promoCodeId String?
  discount    Float       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  promoCode PromoCode?  @relation("OrderPromoCode", fields: [promoCodeId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // One review per user per product
}

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  content     String
  excerpt     String
  slug        String      @unique
  coverImage  String?
  authorId    String
  authorName  String
  authorAvatar String?
  tags        String      // JSON array of tags
  featured    Boolean     @default(false)
  status      BlogStatus  @default(PENDING)  // حالة المقال
  published   Boolean     @default(false)
  publishedAt DateTime?   // تاريخ النشر
  rejectionReason String? // سبب الرفض
  approvedById String?    // من وافق على المقال
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author      User        @relation("BlogAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  approvedBy  User?       @relation("BlogApprover", fields: [approvedById], references: [id])
  featuredPost FeaturedBlogPost?
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String   @default("Tag")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  discountType String  // "PERCENTAGE" or "FIXED"
  discountValue Float  // نسبة الخصم او المبلغ الثابت
  minimumAmount Float?  // أقل مبلغ للشراء
  maxUses     Int?     // عدد الاستخدامات المسموح
  usedCount   Int      @default(0)
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User     @relation("PromoCodeCreator", fields: [createdById], references: [id])
  orders      Order[]  @relation("OrderPromoCode")
}

model HomeService {
  id          String   @id @default(cuid())
  title       String
  subtitle    String
  description String
  features    String   // JSON array of features
  icon        String   // Lucide icon name
  gradient    String   // CSS gradient classes
  bgGradient  String   // Background gradient for hover
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FeaturedBlogPost {
  id          String   @id @default(cuid())
  blogPostId  String   @unique
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  blogPost    BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  USER
  MANAGER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum BlogStatus {
  PENDING     // في انتظار الموافقة
  APPROVED    // موافق عليه
  REJECTED    // مرفوض
  PUBLISHED   // منشور
}
